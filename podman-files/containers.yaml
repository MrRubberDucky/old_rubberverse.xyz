# For use with podman-compose, and also podman running as user (systemctl --user enable --now podman)
# Command: podman-compose -f containers.yaml up -d
# podman doesn't need version 'x.x' at the start of a compose file
# Containers.yml revision: 2.0
services:
# frp - fast reverse proxy
# Podman has auto-update feature already built-in, we just need to specify full URL to the image and add a label to make it work
  frpc:
    image: docker.io/snowdreamtech/frpc:latest
    container_name: frpc
    NetworkMode: pasta
    port_handler: slirp4netns
    read_only: true
    env_file:
      - frpc.env
    ports:
    # mature port ik
      - 42069/udp
    cap_add:
      - NET_ADMIN
    volumes:
      # In frpc.ini, use container names instead of localhost to point to containers
      - ${HOME}/containers/configs/frpc.ini:/etc/frp/frpc.ini:ro,nosuid,nodev
      # Modify file on host to include the following:
      # net.core.rmem_max=2500000
      # then do sudo sysctl -p /etc/sysctl.conf
      - /etc/sysctl.conf:/etc/sysctl.conf
      - ${HOME}/cert:/etc/ssl:ro,nosuid,nodev
    networks:
      - frpc
    labels:
      - io.containers.autoupdate=registry
# Whoogle - privacy front-end for Google
  whoogle:
    image: docker.io/benbusby/whoogle-search:latest
    container_name: whoogle
    user: whoogle
    ports:
      - 4242
    env_file:
      - whoogle.env
    networks:
      - frpc
    NetworkMode: pasta
    volumes:
    # Funnily enough if you give /var/lib/tor or /run/tor it's own tmpfs mount, this will just cease to work
    # In other words /var/lib/tor becomes root linked for some reason?
      - type: tmpfs
        target: /config:size=10M,nosuid,nodev
    security_opt:
      - no-new-privileges
    cap_drop:
      - ALL
    labels:
      - io.containers.autoupdate=registry
  rimgo:
    image: codeberg.org/video-prize-ranch/rimgo:latest
    container_name: rimgo
    user: '65534:65534'
    read_only: true
    env_file:
      - rimgo.env
    labels:
      - io.containers.autoupdate=registry
    NetworkMode: pasta
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    networks:
      - frpc
# postgresql database for umami
  umamidb:
    container_name: umamipostgres
    image: docker.io/library/postgres:15.2-alpine
    env_file:
      - umamidb.env
    ports:
      - 5432
    volumes:
      - ${HOME}/sql:/docker-entrypoint.initdb.d/schema.postgresql.sql:ro
      - umami-db-data:/var/lib/postgresql/data
# umami.is - open-source, privacy-friendly analytics solution
  umami:
    image: ghcr.io/umami-software/umami:postgresql-v2.5.0
    container_name: umami
    ports:
      - 5001
    volumes:
      - ${HOME}/umami:/.cache:rw
    env_file:
      - umami.env
    depends_on:
      - umamidb
    labels:
      - io.containers.autoupdate=registry
    networks:
      - frpc
# This is for Pingvin-Share
  clamav:
    image: docker.io/clamav/clamav:stable
    container_name: clamav
    privileged: true
    labels:
      - io.containers.autoupdate=registry
    ports:
      - 3310
    publish:
      - 3310
  pingvin:
    image: docker.io/stonith404/pingvin-share
    container_name: pingvin-share
    env_file:
      - pingvin.env
    ports:
      - 3000
    volumes:
      - ${HOME}/pingvin-data/:/opt/app/backend/data
      - ${HOME}/pingvin-images/:/opt/app/frontend/public/img
    depends_on:
      clamav:
        condition: service_healthy
    networks:
      - frpc
    labels:
      - io.containers.autoupdate=registry
  dfgqor:
    image: ghcr.io/thelovinator1/discord-free-game-notifier:latest
    container_name: dfgqor
    environment:
      - WEBHOOK_URL=https://discord.com/api/webhooks/<redacted>
      - STEAM_ICON=https://rubberverse.xyz/uploads/steamlogo.png
      - GOG_ICON=https://rubberverse.xyz/uploads/goglogo.png
      - EPIC_ICON=https://rubberverse.xyz/uploads/egsblogo.png
    labels:
      - io.containers.autoupdate=registry
 # FreshRSS
  freshrss:
    image: docker.io/freshrss/freshrss:latest
    container_name: freshrss
    hostname: freshrss
    volumes:
      - '.freshrss_data:/var/www/FreshRSS/data'
      - '.freshrss_extensions:/var/www/FreshRSS/extensions'
    ports:
      - 8080
    env-file:
      - freshrss.env
    networks:
      - frpc
    labels:
      - io.containers.autoupdate=registry
# Zipline Postgres
  pgzip:
    image: docker.io/library/postgres:15.2-alpine
    contaienr-name: sql2
    ports:
      - 5432
    env_file:
      - ziplinedb.env
    volumes:
      - pg_data:/var/lib/postgresql/data
# Zipline
  zipline:
    image: ghcr.io/diced/zipline:trunk
    ports:
      - 3000
    env_file:
      - zipline.env
    volumes:
      - './zipline/uploads:/zipline/uploads'
      - './zipline/public:/zipline/public'
    networks:
      - frpc
    depends_on:
      - pgzip

networks:
  frpc:

volumes:
  cache:
  umami-db-data:
  pg_data:
